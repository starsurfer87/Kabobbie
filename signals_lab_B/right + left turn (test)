// Ultrasonic sensor and motor control pins
int trigPinL = 11;   // Trigger for left ultrasonic sensor
int echoPinL = 10;   // Echo for left ultrasonic sensor
int trigPinR = 3;    // Trigger for right ultrasonic sensor
int echoPinR = 6;    // Echo for right ultrasonic sensor

// Motor control pins
int motorAPin_A = 8; // Right wheel motor control (A-1A)
int motorAPin_B = 9; // Right wheel motor control (A-1B)
int motorBPin_A = 4; // Left wheel motor control (B-1A)
int motorBPin_B = 5; // Left wheel motor control (B-1B)

// Distance variables
int distL, distR;
int SET_POINT = 15;  // Desired distance from the wall (cm)
int POWER = 15;      // Standard power output to motors, in the range [-100,100]
int BASE = 120;      // Minimum power required for motion

void setup() {
  // Initialize serial communication
  Serial.begin(9600);

  // Set up ultrasonic sensor pins
  pinMode(trigPinL, OUTPUT);
  pinMode(echoPinL, INPUT);
  pinMode(trigPinR, OUTPUT);
  pinMode(echoPinR, INPUT);

  // Set up motor pins as outputs
  pinMode(motorAPin_A, OUTPUT);
  pinMode(motorAPin_B, OUTPUT);
  pinMode(motorBPin_A, OUTPUT);
  pinMode(motorBPin_B, OUTPUT);
}

void loop() {
  // Perform outside and inside turns using the left ultrasonic sensor
  measureDistanceL();

  if (distL > SET_POINT) {
    performOutsideTurnLeft(); // Outside left turn
  } else if (distL < SET_POINT) {
    performInsideTurnLeft();  // Inside left turn
  }

  delay(1000); // Pause between turns

  // Perform outside and inside turns using the right ultrasonic sensor
  measureDistanceR();

  if (distR > SET_POINT) {
    performOutsideTurnRight(); // Outside right turn
  } else if (distR < SET_POINT) {
    performInsideTurnRight();  // Inside right turn
  }

  delay(1000);  // Pause before next cycle
}

// Perform an outside turn using the left sensor (move farther from the wall)
void performOutsideTurnLeft() {
  Serial.println("Performing outside turn using left sensor");
  setRightMotor(POWER);  // Right motor moves forward
  setLeftMotor(POWER / 2);  // Left motor moves slower to create a turn
}

// Perform an inside turn using the left sensor (move closer to the wall)
void performInsideTurnLeft() {
  Serial.println("Performing inside turn using left sensor");
  setRightMotor(POWER / 2);  // Right motor moves slower
  setLeftMotor(POWER);  // Left motor moves forward faster for sharper turn
}

// Perform an outside turn using the right sensor (move farther from the wall)
void performOutsideTurnRight() {
  Serial.println("Performing outside turn using right sensor");
  setRightMotor(POWER / 2);  // Right motor moves slower for a turn
  setLeftMotor(POWER);  // Left motor moves faster for an outside turn
}

// Perform an inside turn using the right sensor (move closer to the wall)
void performInsideTurnRight() {
  Serial.println("Performing inside turn using right sensor");
  setRightMotor(POWER);  // Right motor moves faster
  setLeftMotor(POWER / 2);  // Left motor moves slower for a sharper turn
}

// Set power to the right motor [-100, 100]
void setRightMotor(int val) {
  if (val == 0) {
    analogWrite(motorAPin_B, LOW);
  } else if (val > 0) {
    int outputMapped = map(val, 0, 100, BASE, 255);
    analogWrite(motorAPin_A, LOW);
    analogWrite(motorAPin_B, outputMapped);
  } else {
    int outputMapped = map(val, 0, -100, BASE, 255);
    analogWrite(motorAPin_A, 255);
    analogWrite(motorAPin_B, invert(outputMapped));
  }
}

// Set power to the left motor [-100, 100]
void setLeftMotor(int val) {
  if (val == 0) {
    analogWrite(motorBPin_B, LOW);
  } else if (val > 0) {
    int outputMapped = map(val, 0, 100, BASE, 255);
    analogWrite(motorBPin_A, LOW);
    analogWrite(motorBPin_B, outputMapped);
  } else {
    int outputMapped = map(val, 0, -100, BASE, 255);
    analogWrite(motorBPin_A, 255);
    analogWrite(motorBPin_B, invert(outputMapped));
  }
}

// Measure distance using the left ultrasonic sensor
void measureDistanceL() {
  digitalWrite(trigPinL, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPinL, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinL, LOW);

  int duration = pulseIn(echoPinL, HIGH);
  distL = (duration / 2) / 29.1;

  Serial.print("LEFT DISTANCE: ");
  Serial.print(distL);
  Serial.println(" cm");
}

// Measure distance using the right ultrasonic sensor
void measureDistanceR() {
  digitalWrite(trigPinR, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPinR, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPinR, LOW);

  int duration = pulseIn(echoPinR, HIGH);
  distR = (duration / 2) / 29.1;

  Serial.print("RIGHT DISTANCE: ");
  Serial.print(distR);
  Serial.println(" cm");
}

// Inverts the value for backward motion
int invert(int input) {
  return 255 - input;
}
